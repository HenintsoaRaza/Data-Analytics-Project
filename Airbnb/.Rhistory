group_by(city, room_type) %>%
summarise(average_availability_30 = mean(availability_30))
print(df1)
df2 <- listings[listings$city == c,] %>%
group_by(city, bedrooms) %>%
summarise(average_availability_30 = mean(availability_30))
print(df2)
df3 <- listings[listings$city == c,] %>%
group_by(city, neighbourhood_cleansed) %>%
summarise(average_availability_30 = mean(availability_30))
print(df3)
}
for (c in cities) {
df1 <- listings[listings$city == c,] %>%
group_by(city, room_type) %>%
summarise(average_revenue_30 = mean(revenue_30))
print(df1)
df2 <- listings[listings$city == c,] %>%
group_by(city, bedrooms) %>%
summarise(average_revenue_30 = mean(revenue_30))
print(df2)
df3 <- listings[listings$city == c,] %>%
group_by(city, neighbourhood_cleansed) %>%
summarise(average_revenue_30 = mean(revenue_30))
print(df3)
}
for (c in cities) {
avgAvai30_city_roomType <- ggplot(listings[listings$city == c], aes(city, availability_30, fill=city))
g <- avgAvai30_city_roomType + geom_boxplot(aes(colour = room_type),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for (c in cities) {
avgAvai30_city_roomType <- ggplot(listings[listings$city == c,], aes(city, availability_30, fill=city))
g <- avgAvai30_city_roomType + geom_boxplot(aes(colour = room_type),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for (c in cities) {
avgAvai30_city_roomType <- ggplot(listings[listings$city == c,], aes(city, availability_30, fill=city))
g <- avgAvai30_city_roomType + geom_boxplot(aes(colour = room_type),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1") + facet_wrap(~ city)
print(g)
}
for (c in cities) {
avgAvai30_city_roomType <- ggplot(listings[listings$city == c,], aes(city, availability_30, fill=city))
g <- avgAvai30_city_roomType + geom_boxplot(aes(colour = room_type),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for (c in cities) {
avgAvai30_city_bedrooms <- ggplot(listings[listings$city == c, ], aes(city, availability_30, fill=city))
g <- avgAvai30_city_bedrooms + geom_boxplot(aes(colour = bedrooms),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
for (c in cities) {
avgAvai30_city_bedrooms <- ggplot(listings[listings$city == c, ], aes(city, availability_30, fill=city))
g <- avgAvai30_city_bedrooms + geom_boxplot(aes(colour = bedrooms),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for (c in cities) {
avgAvai30_city_roomType <- ggplot(listings[listings$city == c,], aes(city, availability_30, fill=city))
g <- avgAvai30_city_roomType + geom_boxplot(aes(colour = room_type),  lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for (c in cities) {
avgAvai30_city_bedrooms <- ggplot(listings[listings$city == c, ], aes(city, availability_30, fill=city))
g <- avgAvai30_city_bedrooms + geom_boxplot(aes(colour = bedrooms),  lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for (c in cities) {
avgAvai30_city_bedrooms <- ggplot(listings[listings$city == c, ], aes(city, availability_30, fill=city))
g <- avgAvai30_city_bedrooms + geom_boxplot(aes(colour = bedrooms),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for (c in cities) {
avgAvai30_city_bedrooms <- ggplot(listings[listings$city == c & !is.na(listings$bedrooms), ], aes(city, availability_30, fill=city))
g <- avgAvai30_city_bedrooms + geom_boxplot(aes(colour = bedrooms),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
knitr::opts_chunk$set(echo = TRUE)
Availability30_top_10_neighborhood <- listings %>%
group_by(city, neighbourhood_cleansed) %>%
summarise(a = sum(availability_30)) %>%
arrange(a, desc(n))
knitr::opts_chunk$set(echo = TRUE)
source("data_preparation_script.R", local = knitr::knit_global())
head(listings)
listings %>%
group_by(city) %>%
summarise(average_availability_30 = mean(availability_30))
listings %>%
group_by(city) %>%
summarise(Mean_revenue_30 = mean(revenue_30))
avgAvai30 <- ggplot(listings, aes(city, availability_30, fill=city))
avgAvai30 + geom_boxplot(aes(colour = "red"), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
avgRev30 <- ggplot(listings, aes(city, revenue_30, fill=city))
avgRev30 + geom_boxplot(aes(colour = "red"),  outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
avgRev30_city_bed <- ggplot(listings[!is.na(listings$bedrooms),], aes(city, revenue_30, fill=city))
avgRev30_city_bed + geom_boxplot(aes(colour = bedrooms), lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
avgRev30_city_roomType <- ggplot(listings, aes(city, revenue_30, fill=city))
avgRev30_city_roomType + geom_boxplot(aes(colour = room_type),  lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
for(c in cities){
proportion_RoomType <- ggplot(listings[listings$city == c,], aes(room_type))
g <- proportion_RoomType +
geom_bar(aes(y = (..count..)/sum(..count..), fill=factor(..x..)), stat= "count")+
geom_text(aes(label = scales::percent(round((..count..)/sum(..count..),3)),
y= ((..count..)/sum(..count..))), stat="count",
vjust = -.25) + theme(legend.position = "none") + facet_wrap(~ city) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
ylab("Proportion")
print(g)
}
for(c in cities){
proportion_bedrooms<- ggplot(listings[listings$city == c & !is.na(listings$bedrooms), ], aes(bedrooms))
g <- proportion_bedrooms +
geom_bar(aes(y = (..count..)/sum(..count..), fill=factor(..x..)), stat= "count")+
geom_text(aes(label = scales::percent(round((..count..)/sum(..count..),4)),
y= ((..count..)/sum(..count..))), stat="count",
vjust = -.25) +
ylab("Percentage ") + facet_wrap(~ city) + theme(legend.position = "none")
print(g)
}
proportion_neighborhood<- ggplot(listings, aes(neighbourhood_cleansed))
proportion_neighborhood +
geom_bar(aes(y = (..count..)/sum(..count..), fill=factor(..x..)), stat= "count")+
geom_text(aes(label = scales::percent(round((..count..)/sum(..count..),2)),
y= ((..count..)/sum(..count..))), stat="count",
vjust = -.25) +
ylab("Percentage ") + theme(legend.position = "none") + coord_flip()
top_10_neighborhood <- listings %>%
group_by(city) %>%
count(neighbourhood_cleansed) %>%
arrange(city, desc(n))
top_10_neighborhood
total <- top_10_neighborhood %>%
group_by(city) %>%
summarize(tot = sum(n))
total
for(c in cities){
proportion_10neighborhood<- ggplot(slice(top_10_neighborhood[top_10_neighborhood$city == c,], 0:10), aes(x = reorder(neighbourhood_cleansed, -n), fill= n))
g <- proportion_10neighborhood +
geom_bar(aes(x = neighbourhood_cleansed, y = n), stat="identity",  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
theme(legend.position = "none") + coord_flip() + facet_wrap(~ city) + xlab("Neighborhoods ") + ylab("Proportions")
print(g)
}
for (c in cities) {
df1 <- listings[listings$city == c,] %>%
group_by(city, room_type) %>%
summarise(average_availability_30 = mean(availability_30))
print(df1)
df2 <- listings[listings$city == c,] %>%
group_by(city, bedrooms) %>%
summarise(average_availability_30 = mean(availability_30))
print(df2)
df3 <- listings[listings$city == c,] %>%
group_by(city, neighbourhood_cleansed) %>%
summarise(average_availability_30 = mean(availability_30))
print(df3)
}
for (c in cities) {
df1 <- listings[listings$city == c,] %>%
group_by(city, room_type) %>%
summarise(average_revenue_30 = mean(revenue_30))
print(df1)
df2 <- listings[listings$city == c,] %>%
group_by(city, bedrooms) %>%
summarise(average_revenue_30 = mean(revenue_30))
print(df2)
df3 <- listings[listings$city == c,] %>%
group_by(city, neighbourhood_cleansed) %>%
summarise(average_revenue_30 = mean(revenue_30))
print(df3)
}
for (c in cities) {
avgAvai30_city_roomType <- ggplot(listings[listings$city == c,], aes(city, availability_30, fill=city))
g <- avgAvai30_city_roomType + geom_boxplot(aes(colour = room_type),  lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for (c in cities) {
avgAvai30_city_bedrooms <- ggplot(listings[listings$city == c & !is.na(listings$bedrooms), ], aes(city, availability_30, fill=city))
g <- avgAvai30_city_bedrooms + geom_boxplot(aes(colour = bedrooms),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
Availability30_top_10_neighborhood <- listings %>%
group_by(city, neighbourhood_cleansed) %>%
summarise(a = sum(availability_30)) %>%
arrange(a, desc(n))
Availability30_top_10_neighborhood <- listings %>%
group_by(city, neighbourhood_cleansed) %>%
summarise(a = sum(availability_30)) %>%
arrange(city, desc(a))
Availability30_top_10_neighborhood
Availability30_top_10_neighborhood <- listings %>%
group_by(city, neighbourhood_cleansed) %>%
summarise(sum_avai30 = sum(availability_30)) %>%
arrange(city, desc(sum_avai30))
Availability30_top_10_neighborhood
avgAvai30_city_neighbourhood_cleansed <- ggplot(slice(Availability30_top_10_neighborhood[Availability30_top_10_neighborhood$city == c,], 0:10), aes(x = reorder(neighbourhood_cleansed, -sum_avai30), fill= sum_avai30))
avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(aes(colour = neighbourhood_cleansed),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(slice(Availability30_top_10_neighborhood[Availability30_top_10_neighborhood$city == c,], 0:10), aes(x = reorder(neighbourhood_cleansed, -sum_avai30), fill= sum_avai30))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(aes(colour = neighbourhood_cleansed),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(slice(Availability30_top_10_neighborhood[Availability30_top_10_neighborhood$city == c,], 0:10), aes(x = reorder(neighbourhood_cleansed, -sum_avai30), fill= sum_avai30))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_bar(aes(x = neighbourhood_cleansed, y = n), stat="identity",  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
theme(legend.position = "none") + coord_flip() + facet_wrap(~ city) + xlab("Neighborhoods ") + ylab("Proportions")
#g <- avgAvai30_city_neighbourhood_cleansed +
##geom_boxplot(aes(colour = neighbourhood_cleansed),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
#scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
#scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(slice(Availability30_top_10_neighborhood[Availability30_top_10_neighborhood$city == c,], 0:10), aes(neighbourhood_cleansed), fill= neighbourhood_cleansed))
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(slice(Availability30_top_10_neighborhood[Availability30_top_10_neighborhood$city == c,], 0:10), aes(city, availability_30, fill=city))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_bar(aes(x = neighbourhood_cleansed, y = n), stat="identity",  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
theme(legend.position = "none") + coord_flip() + facet_wrap(~ city) + xlab("Neighborhoods ") + ylab("Proportions")
#g <- avgAvai30_city_neighbourhood_cleansed +
##geom_boxplot(aes(colour = neighbourhood_cleansed),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
#scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
#scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(slice(Availability30_top_10_neighborhood[Availability30_top_10_neighborhood$city == c,], 0:10), aes(city, sum_avai30, fill=city))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_bar(aes(x = neighbourhood_cleansed, y = n), stat="identity",  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
theme(legend.position = "none") + coord_flip() + facet_wrap(~ city) + xlab("Neighborhoods ") + ylab("Proportions")
#g <- avgAvai30_city_neighbourhood_cleansed +
##geom_boxplot(aes(colour = neighbourhood_cleansed),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
#scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
#scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(slice(Availability30_top_10_neighborhood[Availability30_top_10_neighborhood$city == c,], 0:10), aes(city, availability_30, fill=city))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_bar(aes(x = neighbourhood_cleansed), stat="identity",  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
theme(legend.position = "none") + coord_flip() + facet_wrap(~ city) + xlab("Neighborhoods ") + ylab("Proportions")
#g <- avgAvai30_city_neighbourhood_cleansed +
##geom_boxplot(aes(colour = neighbourhood_cleansed),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
#scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
#scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(slice(Availability30_top_10_neighborhood[Availability30_top_10_neighborhood$city == c,], 0:10), aes(city, sum_avai30, fill=city))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_bar(aes(x = neighbourhood_cleansed), stat="identity",  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
theme(legend.position = "none") + coord_flip() + facet_wrap(~ city) + xlab("Neighborhoods ") + ylab("Proportions")
#g <- avgAvai30_city_neighbourhood_cleansed +
##geom_boxplot(aes(colour = neighbourhood_cleansed),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
#scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
#scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(slice(Availability30_top_10_neighborhood[Availability30_top_10_neighborhood$city == c,], 0:10), aes(city, sum_avai30, fill=city))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(aes(colour = neighbourhood_cleansed),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(slice(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], 0:10), aes(city, availability_30, fill=city))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(aes(colour = neighbourhood_cleansed),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
Availability30_top_10_neighborhood <- listings %>%
group_by(city, neighbourhood_cleansed) %>%
summarise(sum_avai30 = sum(availability_30)) %>%
top_n(10)
#arrange(city, desc(sum_avai30))
Availability30_top_10_neighborhood
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(slice(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], 0:10), aes(city, availability_30, fill=city))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(aes(colour = neighbourhood_cleansed),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], aes(city, availability_30, fill=city))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(aes(colour = neighbourhood_cleansed),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], aes(city, availability_30, fill=neighbourhood_cleansed))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(aes(colour = neighbourhood_cleansed),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], aes(city, availability_30, fill=neighbourhood_cleansed))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], aes(city, availability_30, fill=neighbourhood_cleansed))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(aes(colour = 'blue'),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], aes(city, availability_30, fill=neighbourhood_cleansed))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(aes(color = 'blue'),  lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], aes(city, availability_30, fill=neighbourhood_cleansed))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(lwd = 0.8, position = position_dodge(0.9), na.rm = T) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], aes(city, availability_30, fill=neighbourhood_cleansed))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for (c in cities) {
avgAvai30_city_bedrooms <- ggplot(listings[listings$city == c & !is.na(listings$bedrooms), ], aes(city, availability_30, fill=city))
g <- avgAvai30_city_bedrooms + geom_boxplot(aes(colour = bedrooms),  lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for (c in cities) {
avgAvai30_city_bedrooms <- ggplot(listings[listings$city == c & !is.na(listings$bedrooms), ], aes(city, availability_30, fill=bedrooms))
g <- avgAvai30_city_bedrooms + geom_boxplot(aes(colour = bedrooms),  lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for (c in cities) {
avgAvai30_city_bedrooms <- ggplot(listings[listings$city == c & !is.na(listings$bedrooms), ], aes(city, availability_30, fill=bedrooms))
g <- avgAvai30_city_bedrooms + geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for (c in cities) {
avgAvai30_city_roomType <- ggplot(listings[listings$city == c,], aes(city, availability_30, fill=room_type))
g <- avgAvai30_city_roomType + geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], aes(city, availability_30, fill=neighbourhood_cleansed))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set3")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], aes(city, availability_30, fill=neighbourhood_cleansed))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set2")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], aes(city, availability_30, fill=neighbourhood_cleansed))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Viridis")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], aes(city, availability_30, fill=neighbourhood_cleansed))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="inferno")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], aes(city, availability_30, fill=neighbourhood_cleansed))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="plasma")
print(g)
}
for(c in cities){
avgAvai30_city_neighbourhood_cleansed <- ggplot(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], aes(city, availability_30, fill=neighbourhood_cleansed))
g <- avgAvai30_city_neighbourhood_cleansed +
geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Spectral")
print(g)
}
for (c in cities) {
avgRev30_city_roomType <- ggplot(listings[listings$city == c,], aes(city, revenue_30, fill=room_type))
g <- avgRev30_city_roomType + geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for (c in cities) {
Rev30_city_roomType <- ggplot(listings[listings$city == c,], aes(city, revenue_30, fill=room_type))
g <- Rev30_city_roomType + geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for(c in cities){
Avai30_city_neighbourhood_cleansed <- ggplot(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], aes(city, availability_30, fill=neighbourhood_cleansed))
g <- Avai30_city_neighbourhood_cleansed +
geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Spectral")
print(g)
}
for (c in cities) {
Avai30_city_bedrooms <- ggplot(listings[listings$city == c & !is.na(listings$bedrooms), ], aes(city, availability_30, fill=bedrooms))
g <- Avai30_city_bedrooms + geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for (c in cities) {
Avai30_city_roomType <- ggplot(listings[listings$city == c,], aes(city, availability_30, fill=room_type))
g <- Avai30_city_roomType + geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$availability_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
for (c in cities) {
Rev30_city_bedrooms <- ggplot(listings[listings$city == c & !is.na(listings$bedrooms), ], aes(city, revenue_30, fill=bedrooms))
g <- Rev30_city_bedrooms + geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Set1")
print(g)
}
Revenue30_top_10_neighborhood <- listings %>%
group_by(city, neighbourhood_cleansed) %>%
summarise(sum_revenue30 = sum(revenue_30)) %>%
top_n(10)
Revenue30_top_10_neighborhood
for(c in cities){
Rev30_city_neighbourhood_cleansed <- ggplot(listings[listings$city == c & listings$neighbourhood_cleansed %in% Availability30_top_10_neighborhood$neighbourhood_cleansed,], aes(city, revenue_30, fill=neighbourhood_cleansed))
g <- Rev30_city_neighbourhood_cleansed +
geom_boxplot(lwd = 0.8, position = position_dodge(0.9), outlier.shape = NA) +
scale_y_continuous(limits = quantile(listings$revenue_30, c(0.1, 0.9), na.rm = T)) +
scale_fill_brewer(palette="Spectral")
print(g)
}
